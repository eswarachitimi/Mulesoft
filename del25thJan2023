%dw 2.0

fun formatDate(date: String) =
  (date as String {format: "yyyy-MM-dd'T'HH:mm:ss"})

fun replaceNewLineWithSpace(value: String) =
  value replace "\n" with (" ")

fun replaceCarriageReturnWithEmpty(value: String) =
  value replace "\r" with ("")

fun replaceCRNLWithEmpty(value: String) =
  value replace "\r\n" with ("")

fun replaceHorizontalTabWithEmpty(value: String) =
  value replace "\t" with ("")

fun replaceSpacesWithEmpty(value: String) =
  value replace "  " with ("")

fun replaceSpaceWithEmpty(value: String) =
  value replace " " with ("")

fun replaceNewLineWithEmpty(value: String) =
  value replace "\n" with ("")

fun removeSpaceNotes(notes: String) =
  trim(replaceSpacesWithEmpty(replaceHorizontalTabWithEmpty(replaceCarriageReturnWithEmpty(replaceNewLineWithSpace(replaceCRNLWithEmpty(notes))))))

fun removeSpaceFlightNo(flightNumber: String) =
  trim(replaceSpaceWithEmpty(replaceHorizontalTabWithEmpty(replaceCarriageReturnWithEmpty(replaceNewLineWithEmpty(replaceCRNLWithEmpty(flightNumber))))))

fun RemoveSpaceHAWBNumber(HAWBNum: String) =
  trim(replaceSpaceWithEmpty(replaceCRNLWithEmpty(HAWBNum)))

fun isNullOrEmptyAndGetRequiredValue(value: String, index: Number) =
  (if ((not isBlank(value)) and ((value indexOf "/") > 0))
    (trim((value splitBy ("/"))[index]))
  else
    (value))

fun matchRegularExpresion(value: String, pattern: String) =
  if (value matches pattern)
    (value)
  else
    ("")
output application/json  
---
{
  "DoNumber": payload.ACSDeliveryOrderRequest.DoNumber,
  "IssueDate": payload.ACSDeliveryOrderRequest.IssueDate,
  "AirLine": payload.ACSDeliveryOrderRequest.AirLine,
  "Notes": removeSpaceNotes(payload.ACSDeliveryOrderRequest.Notes),
  "NotifyDetails": payload.ACSDeliveryOrderRequest.NotifyDetails,
  "AgentDetails": {
    "AgentName": payload.ACSDeliveryOrderRequest.AgentDetails.AgentName,
    "AgentCode": payload.ACSDeliveryOrderRequest.AgentDetails.AgentCode,
    "PoBox": payload.ACSDeliveryOrderRequest.AgentDetails.PoBox,
    "Address": payload.ACSDeliveryOrderRequest.AgentDetails.Address
  },
  "ConsigneeDetails": {
    "ConsigneeName": payload.ACSDeliveryOrderRequest.ConsigneeDetails.ConsigneeName,
    "Address": payload.ACSDeliveryOrderRequest.ConsigneeDetails.Address
  },
  "FlightDetails": {
    "FlightNo": removeSpaceFlightNo(payload.ACSDeliveryOrderRequest.FlightDetails.FlightNo),
    "FlightDate": formatDate(payload.ACSDeliveryOrderRequest.FlightDetails.FlightDate) default "",
    "FlightArrivalDate": formatDate(payload.ACSDeliveryOrderRequest.FlightDetails.FlightArrivalDate) default "",
    "FreightArrivalDate": payload.ACSDeliveryOrderRequest.FlightDetails.FreightArrivalDate
  },
  "AwbDetails": {
    "AWBNumber": replaceSpaceWithEmpty(payload.ACSDeliveryOrderRequest.AwbDetails.AWBNumber),
    "ExpectedQuantity": isNullOrEmptyAndGetRequiredValue(payload.ACSDeliveryOrderRequest.AwbDetails.ExpectedQuantity, 1) as Number,
    "ExpectedWeight": (isNullOrEmptyAndGetRequiredValue(payload.ACSDeliveryOrderRequest.AwbDetails.ExpectedWeight, 1) replace /[^0-9.]/ with ("")) as Number,
    "NatureofGoods": payload.ACSDeliveryOrderRequest.AwbDetails.NatureofGoods,
    "HandlingCodes": matchRegularExpresion(payload.ACSDeliveryOrderRequest.AwbDetails.HandlingCodes, "^[^a-z]*\$"),
    "rcfQuantity": payload.ACSDeliveryOrderRequest.AwbDetails.rcfQuantity as Number,
    "rcfWeight": payload.ACSDeliveryOrderRequest.AwbDetails.rcfWeight as Number,
    "chargeableWeight": payload.ACSDeliveryOrderRequest.AwbDetails.chargeableWeight as Number,
    "chargeableWeightUnit": payload.ACSDeliveryOrderRequest.AwbDetails.chargeableWeightUnit,
    "ExpectedQuantityUnit": payload.ACSDeliveryOrderRequest.AwbDetails.ExpectedQuantityUnit,
    "TotalQuantityUnit": payload.ACSDeliveryOrderRequest.AwbDetails.TotalQuantityUnit,
    "TotalGrossWeightUnit": payload.ACSDeliveryOrderRequest.AwbDetails.TotalGrossWeightUnit
  },
  "HAwbDetails": {
    "AWBNumber": RemoveSpaceHAWBNumber(payload.ACSDeliveryOrderRequest.HAwbDetails.AWBNumber),
    "rcfQuantity": payload.ACSDeliveryOrderRequest.HAwbDetails.rcfQuantity as Number,
    "rcfWeight": payload.ACSDeliveryOrderRequest.HAwbDetails.rcfWeight as Number,
    "ExpectedQuantity": isNullOrEmptyAndGetRequiredValue(payload.ACSDeliveryOrderRequest.HAwbDetails.ExpectedQuantity, 1) as Number,
    "ExpectedWeight": (isNullOrEmptyAndGetRequiredValue(payload.ACSDeliveryOrderRequest.HAwbDetails.ExpectedWeight, 1) replace /[^0-9.]/ with ("")) as Number,
    "NatureofGoods": payload.ACSDeliveryOrderRequest.HAwbDetails.NatureofGoods,
    "HandlingCodes": matchRegularExpresion(payload.ACSDeliveryOrderRequest.HAwbDetails.HandlingCodes, "^[^a-z]*\$"),
    "chargeableWeight": payload.ACSDeliveryOrderRequest.HAwbDetails.chargeableWeight as Number,
    "chargeableWeightUnit": payload.ACSDeliveryOrderRequest.HAwbDetails.chargeableWeightUnit,
    "TotalGrossWeightUnit": payload.ACSDeliveryOrderRequest.HAwbDetails.TotalGrossWeightUnit,
    "TotalQuantityUnit": payload.ACSDeliveryOrderRequest.HAwbDetails.TotalQuantityUnit,
    "ExpectedQuantityUnit": payload.ACSDeliveryOrderRequest.HAwbDetails.ExpectedQuantityUnit
  },
  "documentType": payload.ACSDeliveryOrderRequest.documentType
}
